Tecnologías de programación 2013
TP - Programacion Funcional.
Alumno: Cipolatti Edgardo
DNI: 35215385


--------------------Ejercicio  1---------------------------

a-	(+ 7 (* 2 (- 0 1/3)) (- 0 10,7))
b-	(/ (* 7/3 5/9) (- 5/8 2/3))
c-	(+ 1 (/ 3 (+ 2 (/ 1 (+ 5 1/2)))))
d-	(* 1 (- 0 2) 3 (- 0 4) 5 (- 0 6) 7)

--------------------Ejercicio  2---------------------------

a- (cons 'car '+) = (car . +)

b- (list 'esto '(es muy fácil)) = (esto (es muy fácil))

c- (cons 'pero '(se está complicando...)) = (pero se está complicando...)

d- (cons '(y ahora no se que ) 'hizo) = ((y ahora no se que) . hizo)

e- (quote (+ 7 2)) = (+ 7 2)

f- (cons '+ '(10 3)) = (+ 10 3)

g- (car '(+ 10 3)) = +

h- (cdr '(+ 10 3)) = (10 3)

i- cons = #<procedure:mcons>

j- (quote (cons (car (cdr (7 4)))) ) = (cons (car (cdr (7 4))))

k- (quote cons) = cons

l- (car (quote (quote cons))) = quote

m- (+ 2 3) = 5

n- (+ '2 '3) = 5

ñ- (+ (car '(2 3)) (car (cdr '(2 3)))) = 5

o- ((car (list + - * /)) 2 3) = 5


--------------------Ejercicio  3---------------------------

(car (car '((a b) (c d)))) devuelve a
(car (cdr (car '((a b) (c d))))) devuelve b
(car (car (cdr '((a b) (c d))))) devuelve c
(car (cdr (car (cdr '((a b) (c d)))))) devuelve d


--------------------Ejercicio  4---------------------------

(car '((a b) (c d)))
(cdr '((a b) (c d)))
(car (car '((a b) (c d))))
(cdr (car '((a b) (c d))))
(car (cdr (car '((a b) (c d)))))
(car (cdr '((a b) (c d))))
(car (car (cdr '((a b) (c d)))))
(car (cdr '((a b) (c d))))
(cdr (car (cdr '((a b) (c d)))))
(car (cdr (car (cdr '((a b) (c d))))))

--------------------Ejercicio  5---------------------------
1ero- crea la lista + - * /
2do- elimina el primer elemento, entonces la lista nos queda - * /
3ero- elimina el primer elemento de la lista, entonces la lista queda * /
4to- toma el primer valor de la lista (la funcion multiplicacion *)
5to- utiliza la funcion de multiplicacion con los dos valores (ambos 5)

--------------------Ejercicio  6---------------------------
1- (cdr (cdr (cdr '( a b c . x))))
2- (car (cdr (cdr (cdr '( a b c x)))))
3- (cdr (car'((a . x) b)))
4- (car '(x . a))
5- (cdr '(a . x))
