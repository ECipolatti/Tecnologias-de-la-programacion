(define contar
  (lambda (valor lista)
   (if (null? lista)
       0
       (if (eqv? valor (car lista))
          (+ (contar valor (cdr lista)) 1 )
          (contar valor (cdr lista))
     )
   )
 )
) 
(define rem
  (lambda (valor1 lista1)
    (if (null? lista1)
        '()
        (if(eqv? valor1 (car lista1))
           (rem valor1 (cdr lista1))
           (cons (car lista1) (rem valor1 (cdr lista1)))
           )
      )
   )
 )

(define rep
  (lambda (entero caracter)
    (if (eqv? entero 0)
        '()
        (cons caracter (rep (- entero 1) caracter))
      )
    )
  )
(define agrupar
  (lambda (L)
  (if (null? L)
      '()
      (cons (rep (contar (car L) L) (car L)) (agrupar (rem (car L) L)))
      )
  )
  )
(agrupar '(A A B C A B A D C)) 