 Tecnologías de programación
Cipolatti Edgardo	
DNI: 35215385					      
TP-08 Logico

-----------------------------------------------Ejercicio 1-----------------------------------

factorial(0,1).
factorial(N,F):- N>= 0, G is N-1, factorial(G,F1), F is N*F1.

-----------------------------------------------Ejercicio 2-----------------------------------

contar(X,[],0).
contar(X,[C|L], Cant):- X=C , contar(X, L, Cant2), Cant is Cant2+1,!.
contar(X,[_|L], Cant):- contar(X, L, Cant).

-----------------------------------------------Ejercicio 3-----------------------------------

cantidad([],0).
cantidad([_|L], Cant):- cantidad(L,C2), Cant is C2+1.

-----------------------------------------------Ejercicio 4-----------------------------------

suma([],0).
suma([C|L],S):- suma(L,S2), S is C+S2.

-----------------------------------------------Ejercicio 5-----------------------------------

positivo([],[]).
positivo([C|L],[Cab1|Lista1]):- C>0, positivo(L,Lista1), Cab1 is C, !.
positivo([_|L],L2):- positivo(L,L2).

-----------------------------------------------Ejercicio 6-----------------------------------

largo([],0).
largo([_|L],C):-largo(L,C2), C is C2+1.
suma_lista([],[],[]).
suma_lista([C1|L1],[C2|L2],[C3|L3]):- largo(L1,Largo1),largo(L2,Largo2), Largo1=:=Largo2,
				suma_lista(L1,L2,L3), C3 is C1+C2.

-----------------------------------------------Ejercicio 7----------------------------------- 

eliminar_elem(_,[],[]).
eliminar_elem(X,[C|L],LS):- X=C, eliminar_elem(X,L,LS).
eliminar_elem(X,[C|L],[CL|LS]):- eliminar_elem(X,L,LS), CL is C.

duplicados([],[]).
duplicados([C1|L1],[C2|L2]):- eliminar_elem(C1,L1,L2), duplicados(L1,L2), C2 is C1.

-----------------------------------------------Ejercicio 8-----------------------------------

prof_binario([],0).
prof_binario([_],0).
prof_binario([I,_,D],P):- prof_binario(I,PI), prof_binario(D,PD), (PI>=PD), P is PI+1,!.
prof_binario([I,_,D],P):- prof_binario(I,PI), prof_binario(D,PD), (PI<PD), P is PD+1,!.

-----------------------------------------------Ejercicio 9-----------------------------------

insertar(_,[],[]):-!.
insertar(X,[H1,H2|L],[H1,X,H2|L2]):- H1 < X, H2 >= X, insertar(X,L,L2),!.
insertar(X,[H|L],[H|L2]):-insertar(X,L,L2).

-----------------------------------------------Ejercicio 10-----------------------------------

ins(X,[],[X]).
ins(X,[Y|R],[Y|Rord]):-X>Y,ins(X,R,Rord).
ins(X,[Y|R],[X,Y|R]):-X=<Y.

ordenar([],[]).
ordenar([X|C],Lord):-ordenar(C,Cord),ins(X,Cord,Lord).


-----------------------------------------------Ejercicio 11-----------------------------------

concatenar([],L,L).
concatenar([X|L1],L2,[X|L3]):-concatenar(L1,L2,L3).

lista([_|_]).
lista([]).
aplanar([],[]). 
aplanar([X|L1],[X|L2]):- not(lista(X)), aplanar(L1,L2). 
aplanar([X|L1],L):-  aplanar(L1,L2),  concatenar(X,L2,L). 



-----------------------------------------------Ejercicio 12-----------------------------------

ins(X, L, [ X | L ]).
ins(X, [ Y | L1 ], [ Y | L2 ]) :- ins(X, L1, L2).
per([],[]).
per([ X | L ], Lp) :- per(L, L1), ins(X, L1, Lp).

%El hecho "ins" basicamente lo que hace es tomar dos elmentos y fomar una lista, primero tal como llegan los mismos, [X,L], 
% luego, si L es una lista, inserta el X en la posicion siguiente de la que fue insertado anteriormente.
%El hecho "per" toma de a un elmento (la cabeza) , se llama recursivamente ,con la cola y una variable L1, hasta que llegue al final,
% despues crea una lista con ins seguiendo la logica de este hecho.

per([1,2,3],L).
L = [2,1,3];
L = [2,3,1];
L = [1,3,2];
L = [1,3,2];
L = [3,1,2];
L = [3,2,1];
false.  



