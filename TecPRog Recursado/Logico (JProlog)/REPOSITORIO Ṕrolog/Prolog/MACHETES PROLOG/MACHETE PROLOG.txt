//////////////////////////////////////////////////////////////////////////////////
Extras FUNCIONAL
//////////////////////////////////////////////////////////////////////////////////


==================================================================================
SELECTIONSORT
==================================================================================

min([X|[]],X).
min([X|L], Y):- min(L,Y), Y<X, !.
min([X|L], X):- min(L,Y), X=<Y.
%min([3,2,1,4,5], MIN).

eliminar(_, [],[]).
eliminar(X, [X|L], L):- !.
eliminar(X, [Y|L], [Y|LR]):- X\=Y, eliminar(X,L,LR).
%eliminar(3, [1,5,3,5,4],LR).

selS([],[]):- !.
selS(L, [Y|LR]):- min(L, Y), eliminar(Y,L,Lmod), selS(Lmod,LR), !.
%selS([3,4,2,1,5],LR).


==================================================================================
BUBBLESORT
==================================================================================

bubbles([X|[]],[X]):- !.
bubbles([X,Y|L], [X|LR]):- Y>X, bubbles([Y|L],LR), !.
bubbles([X,Y|L], [Y|LR]):- Y=<X, bubbles([X|L],LR).
%bubbles([4,2,1,3], LR).

bubbleB([], []):-!.
bubbleB([X|[]], [X]):-!.
bubbleB([X,Y|L], LR):- X>Y,  bubbleB([X|L],Lord), bubbles([Y|Lord], LR), !.
bubbleB([X,Y|L], LR):- X=<Y,  bubbleB([Y|L],Lord), bubbles([X|Lord], LR).


%bubbleB([195,42,3,1,3,1,444,3,2], LR).
%bubbleB([105,32,31,142,342,3,24,3], LR).


==================================================================================
INSERTIONSORT
==================================================================================

insert(X,[],[X]):- !.
insert(X,[Y|L],[X,Y|L]):- X=<Y, !.
insert(X,[Y|L],[Y|LR]):- X>Y, insert(X,L,LR).
%insert(3,[1,2,4],LR).

insort([],[]).
insort([X|L], LR):- insort(L,Lord), insert(X,Lord,LR).
%insort([3,3,2,1], LR).


==================================================================================
INSERTIONSORT
==================================================================================

concatenar([],L2,L2).
concatenar([X|L1], L2, [X|LR]):- concatenar(L1,L2,LR).

particionar([],_,[],[]).
particionar([X|L],Y,[X|Lizq],Lder) :-  X =< Y, particionar(L,Y,Lizq,Lder),!.
particionar([X|L],Y,Lizq,[X|Lder]) :-  X > Y, particionar(L,Y,Lizq,Lder).

quicksort([],[]).
quicksort([X|L],L2) :- particionar(L,X,Left,Right), quicksort(Left,Lizq), quicksort(Right,Lder), concatenar(Lizq,[X|Lder],L2).

%quicksort([1,4,5,3,2,2,2,8], LR).


==================================================================================
REVERSE
==================================================================================

concatenar([],L2,L2).
concatenar([X|L1], L2, [X|LR]):- concatenar(L1,L2,LR).
%concatenar([1,2,[3]], [4,[5],6],RES).

reverse([],[]).
reverse([X|L], LR):- reverse(L,L1), concatenar(L1, [X], LR).


==================================================================================
APLANAR
==================================================================================

concatenar([],L2,L2).
concatenar([X1|L1],L2,[X1|LR]):- concatenar(L1,L2,LR).
%concatenar([1,2,[3]], [4,[5],6],RES).

aplanar([],[]).
aplanar([X|L], [X|LR]):- X\=[_|_], aplanar(L, LR).
aplanar([X|L], LR):- X=[_|_], aplanar(X,X1),concatenar(X1,L,L1), aplanar(L1,LR).


==================================================================================
VERIFICACIONES
==================================================================================

----------------------------------------------------------------------------------
Entero:
val_int(L) :- forall(member(X,L),integer(X)).
%val_int([1,2,3,4]).
%val_int([1,2,c,4]).

----------------------------------------------------------------------------------
pares:
val_par(L) :- forall(member(X,L), X mod 2 =:= 0).
%val_par([8,2,6,4]).
%val_par([1,2,3,4]).

----------------------------------------------------------------------------------
Listas de igualdades:
checkear(L) :- forall(member(X,L), not(sublist(X)).
%checkear([1=1, 2=2, 3=3, 4=4, 5=5,6=6]).

----------------------------------------------------------------------------------
Sublistas:
val_sublist(L) :- forall(member(X,L), not( X =[_|_])).
%val_sublist([1,2,3,4]).
%val_sublist([1,2,[3],4]).


















