Tecnologías de programación 2013
Alumno: Tomé Jorge						
DNI: 34656142					      
TP-09 Logico

************EJERCICIO 1******************

factorial(0,1).
factorial(N,F):- N > 0,N1 is N-1, factorial(N1,F1), F is F1*N. 

************EJERCICIO 2******************
contar(_,[],0):-!.
contar(X,[X|L],C):- contar(X,L,C1), C is C1+1,!.
contar(X,[_|L],C):- contar(X,L,C).

************EJERCICIO 3******************

cantidad([],0):-!.
cantidad([_|L],C):- cantidad(L,C1), C is C1+1.

************EJERCICIO 4******************

sumar([],0):-!.
sumar([X|L],C):- sumar(L,C1), C is C1+X.

************EJERCICIO 5******************

positivos([],[]):-!.
positivos([X|L],[X|Pos]):-  X >= 0 , positivos(L,Pos),!.
positivos([_|L],L2):- positivos(L,L2).

************EJERCICIO 6******************
longitud([],[]):- true,!.
longitud([],_):- fail,!.
longitud(_,[]):- fail,!.
longitud([_|L1],[_|L2]):- longitud(L1,L2).

sumar_lista2([],[],[]):-!.
sumar_lista2([X|L1],[Y|L2],[S|L3]):- S is X+Y, sumar_lista2(L1,L2,L3).
sumar_lista(L1,L2,L3):- longitud(L1,L2),sumar_lista2(L1,L2,L3).

------------OTRA FORMA---------------
longitud([],0):-!.
longitud([_|L],C):- longitud(L,C1), C is C1+1.

sumar_lista2([],[],[]):-!.
sumar_lista2([X|L1],[Y|L2],[S|L3]):- S is X+Y, sumar_lista2(L1,L2,L3).

sumar_lista(L1,L2,L3):- longitud(L1,C1),longitud(L2,C2),C1==C2,sumar_lista2(L1,L2,L3).

************EJERCICIO 7******************
busca(X,[X|_]).
busca(X,[_|T]):- busca(X,T).

elim_dup([],[]):-!.
elim_dup([X|L],L2):- busca(X,L),!,elim_dup(L,L2).
elim_dup([X|L],[X|L2]):-  elim_dup(L,L2).

************EJERCICIO 8******************
prof_binario([],0).
prof_binario([_],0).
prof_binario([I,_,D],P):- prof_binario(I,PI), prof_binario(D,PD), (PI>=PD), P is PI+1,!.
prof_binario([I,_,D],P):- prof_binario(I,PI), prof_binario(D,PD), (PI<PD), P is PD+1,!.

************EJERCICIO 9******************

insertar(_,[],[]):-!.
insertar(X,[H1,H2|L],[H1,X,H2|L2]):- H1 < X, H2 >= X, insertar(X,L,L2),!.
insertar(X,[H|L],[H|L2]):-insertar(X,L,L2).

************EJERCICIO 10******************
ins(X,[],[X]).
ins(X,[Y|R],[Y|Rord]):-X>Y,ins(X,R,Rord).
ins(X,[Y|R],[X,Y|R]):-X=<Y.

ordenar([],[]).
ordenar([X|C],Lord):-ordenar(C,Cord),ins(X,Cord,Lord).


************EJERCICIO 11******************
concatenar([],L,L).
concatenar([X|L1],L2,[X|L3]):-concatenar(L1,L2,L3).

lista([_|_]).
lista([]).
aplanar([],[]). 
aplanar([X|L1],[X|L2]):- not(lista(X)), aplanar(L1,L2). 
aplanar([X|L1],L):-  aplanar(L1,L2),  concatenar(X,L2,L). 

************EJERCICIO 12******************
ins(X, L, [ X | L ]).
ins(X, [ Y | L1 ], [ Y | L2 ]) :- ins(X, L1, L2).
per([],[]).
per([ X | L ], Lp) :- per(L, L1), ins(X, L1, Lp).

%El hecho "ins" basicamente lo que hace es tomar dos elmentos y fomar una lista, primero tal como llegan los mismos, [X,L], 
% luego, si L es una lista, inserta el X en la posicion siguiente de la que fue insertado anteriormente.
%El hecho "per" toma de a un elmento (la cabeza) , se llama recursivamente ,con la cola y una variable L1, hasta que llegue al final,
% despues crea una lista con ins seguiendo la logica de este hecho.

per([1,2,3],L).
L = [2,1,3];
L = [2,3,1];
L = [1,3,2];
L = [1,3,2];
L = [3,1,2];
L = [3,2,1];
false.  
